package com.ssafy.minji;

import java.io.*;
import java.util.*;

class GRM_통신망분석 {
	static class Component implements Comparable<Component> {
		static List<Integer> component;
		static double density;
		
		Component(List<Integer> component, double density) {
			this.component = component;
			this.density = density;
		}

		@Override
		public int compareTo(Component c) {
			if (this.density != c.density) {
				if (this.density > c.density) return -1;
				else return 1;
			} else if (this.component.size() != c.component.size()) {
				return this.component.size() - c.component.size();
			} else {
				return this.component.get(0) - c.component.get(0);
			}
			
		}
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input = br.readLine();
		int N = input.charAt(0) - '0';
		int M = input.charAt(2) - '0';

		List<Integer>[] adj = new ArrayList[N+1];
		for (int i = 1; i < N+1; i++) {
			adj[i] = new ArrayList<>();
		}

		for (int i = 0; i < M; i++) {
			input = br.readLine();
			int s = input.charAt(0) - '0';
			int e = input.charAt(2) - '0';
			adj[s].add(e);
			adj[e].add(s);
		}

		boolean[] visited = new boolean[N+1];
		int[] p = new int[N+1];
		for (int i = 1; i < N+1; i++) p[i] = i;

		Queue<Integer> q = new LinkedList<>();
		List<Integer> component;
		PriorityQueue<Component> pq = new PriorityQueue<>();
		for (int i = 1; i < N+1; i++) {
			component = new ArrayList<>();
			if (visited[i]) continue;
			q.add(i);
			component.add(i);
			visited[i] = true;

			while (!q.isEmpty()) {
				int curr = q.poll();
				for (int v : adj[curr]) {
					if (visited[v]) continue;
					q.add(v);
					component.add(v);
					p[v] = curr;
					visited[v] = true;
				}
			}

			Collections.sort(component);
			System.out.println(i + " : " + component);
			int sum = 0;
			for (int c : component) {
				sum += adj[c].size();
			}
			System.out.println("sum : " + sum);
			double density = (sum/2) / (double) component.size();
			System.out.println("density : " + density);
			pq.add(new Component(component, density));			
		}

		for (int v : pq.poll().component) {
			System.out.print(v + " ");
		}
	}
}
