import java.io.*;
import java.util.*;

public class Solution {
    static int T;
    static int maxScore;
    static int N;
    static int[][] board;

    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};

    static ArrayList<int[]>[] wormholes;

    static boolean isOut(int r, int c) {
        return r < 0 || c < 0 || r >= N || c >= N;
    }

    static int reflectDir(int block, int dir) {
        switch (block) {
            case 1:
                switch (dir) {
                    case 0: return 1;
                    case 1: return 3;
                    case 2: return 0;
                    case 3: return 2;
                }
                break;
            case 2:
                switch (dir) {
                    case 0: return 3;
                    case 1: return 0;
                    case 2: return 1;
                    case 3: return 2;
                }
                break;
            case 3:
                switch (dir) {
                    case 0: return 2;
                    case 1: return 0;
                    case 2: return 3;
                    case 3: return 1;
                }
                break;
            case 4:
                switch (dir) {
                    case 0: return 1;
                    case 1: return 2;
                    case 2: return 3;
                    case 3: return 0;
                }
                break;
            case 5:
                switch (dir) {
                    case 0: return 1;
                    case 1: return 0;
                    case 2: return 3;
                    case 3: return 2;
                }
                break;
        }
        return dir;
    }

    static int doPinball(int r, int c, int d) {
        int score = 0;
        int row = r;
        int col = c;
        int dir = d;

        row += dr[dir];
        col += dc[dir];

        while (true) {
            if (row == r && col == c) return score;

            if (isOut(row, col)) {
                switch (dir) {
                    case 0: dir = 1; break;
                    case 1: dir = 0; break;
                    case 2: dir = 3; break;
                    case 3: dir = 2; break;
                }
                score++;
            } else if (board[row][col] >= 1 && board[row][col] <= 5) {
                dir = reflectDir(board[row][col], dir);
                score++;
            } else if (board[row][col] >= 6 && board[row][col] <= 10) {
                int newRow, newCol;
                if (wormholes[board[row][col]].get(0)[0] == row && wormholes[board[row][col]].get(0)[1] == col) {
                    newRow = wormholes[board[row][col]].get(1)[0];
                    newCol = wormholes[board[row][col]].get(1)[1];
                } else {
                    newRow = wormholes[board[row][col]].get(0)[0];
                    newCol = wormholes[board[row][col]].get(0)[1];
                }
                row = newRow;
                col = newCol;
            } else if (board[row][col] == -1) {
                return score;
            }

            row += dr[dir];
            col += dc[dir];
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st;

        T = Integer.parseInt(br.readLine());

        for (int t = 1; t <= T; t++) {
            sb.append("#").append(t).append(" ");
            maxScore = 0;
            N = Integer.parseInt(br.readLine());
            board = new int[N][N];
            wormholes = new ArrayList[11];

            for (int i = 6; i <= 10; i++) {
                wormholes[i] = new ArrayList<>();
            }

            for (int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine());
                for (int j = 0; j < N; j++) {
                    board[i][j] = Integer.parseInt(st.nextToken());
                    if (board[i][j] >= 6 && board[i][j] <= 10) {
                        wormholes[board[i][j]].add(new int[]{i, j});
                    }
                }
            }

            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (board[i][j] == 0) {
                        for (int d = 0; d < 4; d++) {
                            int score = doPinball(i, j, d);
                            if (maxScore < score) maxScore = score;
                        }
                    }
                }
            }
            sb.append(maxScore).append("\n");
        }
        System.out.print(sb);
    }
}
